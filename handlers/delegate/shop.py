from aiogram import Router, F  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏ –∏–∑ aiogram
from aiogram.fsm.context import FSMContext  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º FSMContext –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
from aiogram.types import CallbackQuery, Message  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∏–ø—ã

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–º–∏
from database.users import get_item_inventory
from keyboards.profile_kb import main_back
from database.base import DataBase
from aiogram.utils.keyboard import InlineKeyboardBuilder

from keyboards.shop_kb import ItemCallback, generate_shop_keyboard, PageCallback
from states.shop import AddItem, EditItem

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ä–æ—É—Ç–µ—Ä–∞ –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
router = Router()
db = DataBase()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–∞–≥–∞–∑–∏–Ω–∞
@router.callback_query(F.data == 'shop')
async def shop_menu(call: CallbackQuery):
    await db.connect()  # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    items = await db.fetch_items()  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    total_items = await db.count_items()  # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
    total_pages = total_items // 9 + (1 if total_items % 9 else 0)  # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü

    role = await db.get_user_role(call.message.chat.id)  # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    is_organizer = role == "–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä"
    text = "‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω! ‚ú®"
    keyboard = generate_shop_keyboard(items, 1, total_pages, is_organizer)  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–∞–≥–∞–∑–∏–Ω–∞

    await call.message.edit_text(text, reply_markup=keyboard)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@router.callback_query(F.data == 'add_item')
async def add_item_start(call: CallbackQuery, state: FSMContext):
    role = await db.get_user_role(call.from_user.id)  # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if role != "–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä":
        await call.message.answer("–¢–æ–ª—å–∫–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã.")  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        return

    await state.set_state(AddItem.waiting_for_name)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ —Ç–æ–≤–∞—Ä–∞
    await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:", reply_markup=None)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ —Ç–æ–≤–∞—Ä–∞
@router.message(AddItem.waiting_for_name)
async def item_id_received(message: Message, state: FSMContext):
    await state.update_data(name=message.text)  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.set_state(AddItem.waiting_for_description)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@router.message(AddItem.waiting_for_description)
async def item_description_received(message: Message, state: FSMContext):
    await state.update_data(description=message.text)  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.set_state(AddItem.waiting_for_price)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø—Ä–µ–¥–º–µ—Ç–∞:")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞
@router.message(AddItem.waiting_for_price)
async def item_price_received(message: Message, state: FSMContext):
    await state.update_data(price=message.text)  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.set_state(AddItem.waiting_for_amount)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–∞:")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
@router.message(AddItem.waiting_for_amount)
async def item_amount_received(message: Message, state: FSMContext):
    await state.update_data(amount=message.text)  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è

    data = await state.get_data()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å—Ç–∞–≤–∫—É –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await db.connection.execute(
        "INSERT INTO shop (name, description, price, amount) VALUES (?, ?, ?, ?)",
        (data['name'], data['description'], data['price'], data['amount'])
    )
    await db.connection.commit()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await message.answer("–ü—Ä–µ–¥–º–µ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–∞–≥–∞–∑–∏–Ω!", reply_markup=main_back())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
@router.callback_query(PageCallback.filter())
async def paginate(call: CallbackQuery, callback_data: PageCallback):
    page = callback_data.page  # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã

    offset = (page - 1) * 9  # –í—ã—á–∏—Å–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤

    items = await db.fetch_items(offset=offset)  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã —Å —É—á–µ—Ç–æ–º —Å–º–µ—â–µ–Ω–∏—è
    total_items = await db.count_items()  # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
    total_pages = (total_items + 8) // 9  # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    role = await db.get_user_role(call.message.chat.id)  # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    is_organizer = role == "–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä"

    current_page_items = items[:9]  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if not current_page_items and page > 1:
        page -= 1
        offset = (page - 1) * 9
        items = await db.fetch_items(offset=offset)
        current_page_items = items[:9]

    keyboard = generate_shop_keyboard(current_page_items, page, total_pages, is_organizer)  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await call.message.edit_reply_markup(reply_markup=keyboard)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ–æ–±—â–µ–Ω–∏—è


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π —Ç–æ–≤–∞—Ä–∞
@router.callback_query(ItemCallback.filter(F.action == "view"))
async def show_item_details(call: CallbackQuery, callback_data: ItemCallback):
    item_id = callback_data.item_id  # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ç–æ–≤–∞—Ä–∞
    await db.connect()
    async with db.connection.execute("SELECT * FROM shop WHERE item_id = ?",
                                     (item_id,)) as cursor:
        item = await cursor.fetchone()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤, –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    async with db.connection.execute("SELECT COUNT(*) FROM inventory WHERE item = ?", (item[0],)) as cursor:
        count = await cursor.fetchone()
        sold_count = int(count[0])

    text = (f"<b>{item[0]}</b>"
            f"\n<b>{item[1]}</b>"
            f"\n\nüí∞ <b>–¶–µ–Ω–∞:</b> {item[2]} ü™ô"
            f"\nüì¶ <b>–û—Å—Ç–∞–ª–æ—Å—å:</b> {item[3] - sold_count} —à—Ç.")

    role = await db.get_user_role(call.from_user.id)
    if role == "–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä":
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="–£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç",
                        callback_data=ItemCallback(action="delete", item_id=str(item[-1])).pack())
        keyboard.button(text="–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ",
                        callback_data=ItemCallback(action="edit_amount", item_id=str(item[-1])).pack())
        keyboard.button(text="–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="shop")
        keyboard.adjust(1, repeat=True)
        keyboard = keyboard.as_markup()
    elif item[3] - sold_count <= 0:
        text += "\n\n<b>üéâ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è! üåü</b>"
        keyboard = InlineKeyboardBuilder().button(text="–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="shop").as_markup()
    else:
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="–ö—É–ø–∏—Ç—å", callback_data=ItemCallback(action="buy", item_id=str(item[-1])))
        keyboard.button(text="–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="shop")
        keyboard.adjust(1, repeat=True)
        keyboard = keyboard.as_markup()
    await call.message.edit_text(text, reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞
@router.callback_query(ItemCallback.filter(F.action == "buy"))
async def buy_item(call: CallbackQuery, callback_data: ItemCallback):
    user_id = call.from_user.id
    item_id = callback_data.item_id
    async with db.connection.execute("SELECT amount, name FROM shop WHERE item_id = ?", (item_id,)) as cursor:
        amount = await cursor.fetchone()

    role = await db.get_user_role(user_id)

    buy_amount = len(await get_item_inventory(amount[-1]))

    if role == "–î–µ–ª–µ–≥–∞—Ç" and buy_amount < amount[0]:
        async with db.connection.execute("SELECT name, description, price FROM shop WHERE item_id = ?",
                                         (item_id,)) as cursor:
            item = await cursor.fetchone()

        async with db.connection.execute("SELECT coins FROM users WHERE userid = ?", (user_id,)) as cursor:
            user = await cursor.fetchone()
            user_coins = int(user[0])

        async with db.connection.execute("SELECT COUNT(*) FROM inventory WHERE userid = ? AND item_id = ?",
                                         (user_id, item_id)) as cursor:
            count = await cursor.fetchone()
            item_count = int(count[0])

        if item_count > 0:
            await call.message.edit_text("‚úÖ <b>–í—ã —É–∂–µ –∫—É–ø–∏–ª–∏ —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç.</b>", reply_markup=main_back())
        elif user_coins >= int(item[2]):
            await db.connection.execute(
                "INSERT INTO inventory (userid, item, description, item_id) VALUES (?, ?, ?, ?)",
                (user_id, item[0], item[1], item_id))
            await db.connection.execute("UPDATE users SET coins = coins - ? WHERE userid = ?", (item[2], user_id))
            await db.connection.commit()

            await call.message.edit_text(f"üéâ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ {item[0]}!</b>", reply_markup=main_back())
        else:
            await call.message.edit_text("‚ùó <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞!</b>",
                                         reply_markup=main_back())
    else:
        await call.message.edit_text("üö´ <b>–≠—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç —É–∂–µ —Ä–∞—Å–ø—Ä–æ–¥–∞–ª–∏.</b>", reply_markup=main_back())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@router.callback_query(ItemCallback.filter(F.action == "delete"))
async def delete_item(call: CallbackQuery, callback_data: ItemCallback):
    item_id = callback_data.item_id
    await db.connection.execute("DELETE FROM shop WHERE item_id = ?", (item_id,))
    await db.connection.commit()

    await call.message.edit_text(f"–ü—Ä–µ–¥–º–µ—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.", reply_markup=main_back())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
@router.callback_query(ItemCallback.filter(F.action == "edit_amount"))
async def edit_item_amount_start(call: CallbackQuery, callback_data: ItemCallback, state: FSMContext):
    item_id = callback_data.item_id
    await state.update_data(item_id=item_id)
    await state.set_state(EditItem.waiting_for_new_amount)
    await call.message.edit_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞:", reply_markup=None)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
@router.message(EditItem.waiting_for_new_amount)
async def edit_item_amount_received(message: Message, state: FSMContext):
    new_amount = message.text
    data = await state.get_data()
    item_id = data['item_id']

    await db.connection.execute("UPDATE shop SET amount = ? WHERE item_id = ?", (new_amount, item_id))
    await db.connection.commit()

    await state.clear()
    await message.answer(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_amount}.", reply_markup=main_back())
