from aiogram import Router, F  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏ –∏–∑ aiogram
from aiogram.filters import StateFilter  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
from aiogram.types import CallbackQuery, Message, InlineKeyboardButton  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω—É–∂–Ω—ã–µ —Ç–∏–ø—ã
from aiogram.utils.keyboard import InlineKeyboardBuilder  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º InlineKeyboardBuilder –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–º–∏
from database.users import (get_user, get_rating, get_goals, create_goal, delete_goal, update_username,
                            update_initials, get_user_inventory, db)
from filters.regular_expressions import RegularExpressionsFilter
from keyboards.profile_kb import menu_profile_kb, add_goal_kb, add_new_goal_kb, back_successful, delete_goal_kb, \
    profile_back, inventory_kb, InventoryItemCallback, InventoryPageCallback, generate_inventory_keyboard
from states.goal import GoalState
from aiogram.fsm.context import FSMContext

from states.profile import InitialsState

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ä–æ—É—Ç–µ—Ä–∞
router = Router()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è
@router.callback_query(F.data == 'profile')
async def profile_menu(call: CallbackQuery):
    profile_id = call.message.chat.id
    profile = await get_user(str(profile_id))  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    all_rating = await get_rating()  # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ —É–±—ã–≤–∞–Ω–∏—é
    filtered_rating = sorted([i for i in all_rating if i[0] > 0], reverse=True)
    all_ranking = {item[1]: rank + 1 for rank, item in enumerate(filtered_rating)}  # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
    initials = profile[0]
    username = profile[2]
    level = profile[4]
    rating = profile[5]
    coin = profile[6]
    if profile_id in all_ranking:
        ranking = all_ranking[profile_id]
    else:
        ranking = '–µ—â–µ –Ω–µ –≤ —Ç–æ–ø–µ'

    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    goals_text = ""
    goals = await get_goals(str(call.message.chat.id))
    if goals:
        for goal_ in goals:
            goals_text += f"üî∏<b> {goal_[0]}\n</b>"
    else:
        goals_text += "üî∏ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ü–µ–ª–µ–π\n"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
    profile_info = f"""
üìù <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>

üîπ {initials}
üîπ {username}

üéØ <b>–ú–æ–∏ —Ü–µ–ª–∏:</b>
{goals_text}
üí∞ <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å—á–µ—Ç–∞ (–ú–æ–Ω–µ—Ç):</b> {coin}

üìä <b>–í–∞—à —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å:</b> {level}

‚≠êÔ∏è <b>–í–∞—à —Ä–µ–π—Ç–∏–Ω–≥:</b> {rating}

üèÜ <b>–í–∞—à–µ –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ:</b> {ranking}
    """

    await call.message.edit_text(profile_info, reply_markup=menu_profile_kb())  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.callback_query(F.data == 'change_username')
async def goal_menu(call: CallbackQuery):
    username = "@" + call.message.chat.username
    await update_username(str(call.message.chat.id), username)  # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

    text = f"–í–∞—à username –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {username}"
    await call.message.edit_text(text, reply_markup=profile_back())  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ –∏–º–µ–Ω–∏


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.callback_query(F.data == 'change_initials')
async def goal_menu(call: CallbackQuery, state: FSMContext):
    username = "@" + call.message.chat.username
    await update_username(str(call.message.chat.id), username)  # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

    text = f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –∏–Ω–∏—Ü–∏–∞–ª—ã –ø–æ —à–∞–±–ª–æ–Ω—É - –§–∞–º–∏–ª–∏—è –ò. –û"
    await call.message.edit_text(text)  # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ –∏–Ω–∏—Ü–∏–∞–ª–æ–≤
    await state.set_state(InitialsState.change_initials)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∏–Ω–∏—Ü–∏–∞–ª–æ–≤


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(InitialsState.change_initials,
                RegularExpressionsFilter(pattern=r'^[–ê-–Ø–Å][–∞-—è—ë]+\s[–ê-–Ø–Å]\.\s[–ê-–Ø–Å]$'))
async def choose_initials(message: Message, state: FSMContext):
    initials = message.text
    await update_initials(str(message.chat.id), initials)  # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await message.answer(f"–ò–Ω–∏—Ü–∏–∞–ª—ã –∏–∑–º–µ–Ω–µ–Ω—ã –Ω–∞ {initials}.", reply_markup=profile_back())  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∏–Ω–∏—Ü–∏–∞–ª–æ–≤
@router.message(StateFilter("InitialsState:change_initials"))
async def initials_incorrectly(message: Message):
    await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª—ã. –í–≤–µ–¥–∏—Ç–µ –∫–∞–∫ –ø–æ —à–∞–±–ª–æ–Ω—É, –≤–∫–ª—é—á–∞—è –ø—Ä–æ–±–µ–ª—ã - –§–∞–º–∏–ª–∏—è –ò.–û")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ü–µ–ª–∏
@router.callback_query(F.data == 'add_goal')
async def goal_menu(call: CallbackQuery, state: FSMContext):
    await state.clear()
    text = f"–í–æ—Ç –≤–∞—à–∏ —Ü–µ–ª–∏:\n"
    goals = await get_goals(str(call.message.chat.id))  # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if goals:
        for goal_ in goals:
            text += f"- {goal_[0]}\n"
        goals = len(goals)
    else:
        goals = 0
        text += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ü–µ–ª–µ–π\n"
    text += "\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–µ–ª–µ–π: 5"
    await call.message.edit_text(text, reply_markup=add_goal_kb(goals))  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ü–µ–ª—è–º–∏


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ü–µ–ª–∏
@router.callback_query(F.data == 'delete_goal')
async def add_new_goal(call: CallbackQuery):
    goals = await get_goals(str(call.message.chat.id))  # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:", reply_markup=delete_goal_kb(goals))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ü–µ–ª–∏
@router.callback_query(F.data.startswith("forcedelete"))
async def add_new_goal(call: CallbackQuery):
    goal_text = call.data.split("_")[-1]
    await delete_goal(str(call.message.chat.id), goal_text)  # –£–¥–∞–ª—è–µ–º —Ü–µ–ª—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await call.message.edit_text("–¶–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.", reply_markup=back_successful())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π —Ü–µ–ª–∏
@router.callback_query(F.data == 'add_new_goal')
async def add_new_goal(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—å.", reply_markup=None)
    await state.set_state(GoalState.waiting_for_message)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Ü–µ–ª–∏


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π —Ü–µ–ª–∏
@router.message(GoalState.waiting_for_message)
async def goal_message(message: Message, state: FSMContext):
    goal = message.text
    await state.update_data(goal=goal)
    await message.answer(f"–í–æ—Ç –≤–∞—à–∞ —Ü–µ–ª—å:\n- {goal}\n\n–£–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –µ–µ –¥–æ–±–∞–≤–∏—Ç—å?", reply_markup=add_new_goal_kb())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Ü–µ–ª–∏
@router.callback_query(F.data == 'create_new_goal')
async def add_new_goal(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await create_goal(data['goal'], str(call.message.chat.id))  # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ü–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await call.message.edit_text("–¶–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.", reply_markup=back_successful())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
@router.callback_query(F.data == 'inventory')
async def inventory_menu(call: CallbackQuery):
    user_id = call.message.chat.id
    items = await get_user_inventory(str(user_id))  # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    total_items = len(items)
    total_pages = total_items // 9 + (1 if total_items % 9 else 0)
    current_page_items = items[:9]

    text = ""
    if total_items <= 0:
        text += ("üîπ –£ –≤–∞—Å –ø–æ–∫–∞ –ø—É—Å—Ç–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å."
                 "\n\n‚ú® –ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ! –≠—Ç–æ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ –≤–∞—à–µ–≥–æ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è! üåü"
                 "\n\nüó∫Ô∏è –≠—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç—ã –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω–µ –∑–∞ –º–æ–Ω–µ—Ç—ã. üõíüí∞"
                 "\n\n‚ö° –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –º–æ–Ω–µ—Ç—ã –∏ –Ω–∞–ø–æ–ª–Ω—è–π—Ç–µ —Å–≤–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –≤–µ—â–∞–º–∏!")
    else:
        text += "üîπ –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:"
    keyboard = generate_inventory_keyboard(current_page_items, 1, total_pages)
    await call.message.edit_text(text, reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
@router.callback_query(InventoryPageCallback.filter())
async def paginate_inventory(call: CallbackQuery, callback_data: InventoryPageCallback):
    page = callback_data.page
    user_id = call.message.chat.id

    items = await get_user_inventory(str(user_id))  # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    offset = (page - 1) * 9
    current_page_items = items[offset:offset + 9]
    total_items = len(items)
    total_pages = (total_items + 8) // 9

    keyboard = inventory_kb(current_page_items, page, total_pages)
    await call.message.edit_reply_markup(reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
@router.callback_query(InventoryItemCallback.filter())
async def show_inventory_item_details(call: CallbackQuery, callback_data: InventoryItemCallback):
    item_id = callback_data.item_id  # –ò—Å–ø–æ–ª—å–∑—É–µ–º item_id
    user_id = call.message.chat.id
    async with db.connection.execute("SELECT item, description FROM inventory WHERE userid = ? AND item_id = ?",
                                     (user_id, item_id)) as cursor:  # –ó–∞–ø—Ä–æ—Å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º item_id
        item = await cursor.fetchone()
    user = await get_user(str(user_id))
    text = f"üéí <b>–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å {user[0]}üéí\n{item[0]}\n{item[1]}</b> "
    keyboard = InlineKeyboardBuilder().button(text="–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="inventory").as_markup()
    await call.message.edit_text(text, reply_markup=keyboard)
