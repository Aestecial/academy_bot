from aiogram import F, Router  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏ –∏–∑ aiogram
from aiogram.fsm.context import FSMContext  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º FSMContext –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
from aiogram.types import Message, CallbackQuery  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∏–ø—ã

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
from database.programs import get_program, create_program
from keyboards.profile_kb import main_back
from keyboards.programs_kb import programs_kb, preview_kb

from states.create_programs import ProgramsStates  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ä–æ—É—Ç–µ—Ä–∞
router = Router()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@router.callback_query(F.data == "create_programs")
async def create_programs_menu(call: CallbackQuery):
    program_text = await get_program()  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    text = f"üìÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:\n{program_text}"
    await call.message.edit_text(text, reply_markup=programs_kb())  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@router.callback_query(F.data == "update_programs")
async def create_programs_handler(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã:")
    await state.set_state(ProgramsStates.waiting_for_event_text)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã
@router.message(ProgramsStates.waiting_for_event_text)
async def receive_programs_text(message: Message, state: FSMContext):
    await state.update_data(text=message.text)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    data = await state.get_data()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    preview_text = f"–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–≥—Ä–∞–º–º—ã:\n{data['text']}"
    await message.answer(preview_text,
                         reply_markup=preview_kb())  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã
@router.callback_query(F.data == 'send_programs')
async def send_programs_handler(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await create_program(data['text'])  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await callback_query.message.edit_text("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.",
                                           reply_markup=main_back())  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
    data = dict()  # –û—á–∏—â–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã
@router.callback_query(F.data == 'cancel_programs')
async def cancel_programs_handler(callback_query: CallbackQuery):
    await callback_query.message.edit_text("–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                                           reply_markup=main_back())  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ
