from aiogram import F, Router, Bot  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏ –∏–∑ aiogram
from aiogram.fsm.context import FSMContext  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º FSMContext –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
from aiogram.types import CallbackQuery  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∏–ø—ã

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
from database.event_applications import (
    get_user_application, create_application, get_all_organizers,
    get_users_application, remove_user_application, set_application_status,
    get_all_applications
)
from database.events import get_events, get_event
from database.users import get_user, get_goals
from keyboards.event_signup_kb import (
    application_mailing_kb, applications_kb, application_delegate_kb,
    applications_back, menu_back
)
from keyboards.profile_kb import main_back

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ä–æ—É—Ç–µ—Ä–∞
router = Router()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
@router.callback_query(F.data.startswith('signup_event_'))
async def event_signup(call: CallbackQuery, bot: Bot, state: FSMContext):
    event_id = int(call.data.split("_")[-1])
    profile_id = str(call.message.chat.id)
    event = await get_event(event_id)
    await state.update_data(profile_id=profile_id)

    user_application = await get_user_application(profile_id)
    all_applications = await get_all_applications()

    if user_application:
        text = "–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ."
    elif len(all_applications) >= event[-1]:
        text = "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–æ—Å—Ç–∏–≥–ª–æ –ª–∏–º–∏—Ç–∞."
    else:
        text = "–£—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ."
        user = await get_user(profile_id)
        await create_application(user[0], user[2], user[3], event_id)

        organizers = await get_all_organizers()
        for organizer in organizers:
            or_text = "–ü–æ—è–≤–∏–ª–∞—Å—å –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ."
            await bot.send_message(organizer[0], or_text, reply_markup=application_mailing_kb())

    await call.message.edit_text(text, reply_markup=main_back())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
@router.callback_query(F.data.startswith('check_application'))
async def check_application(call: CallbackQuery, state: FSMContext):
    page = call.data.split("/")[-1]
    try:
        page = int(page)
    except ValueError:
        page = 1

    delegates = await get_users_application('–ù–æ–≤—ã–π')
    await state.update_data(delegates=delegates, current_page=page)

    if delegates:
        text = "–í—ã–±–µ—Ä–∏ –¥–µ–ª–µ–≥–∞—Ç–∞."
        await call.message.edit_text(text, reply_markup=applications_kb(page, delegates, call.data))
    else:
        text = "–ù–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç."
        await call.message.edit_text(text, reply_markup=menu_back())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤–ª–µ–≤–æ
@router.callback_query(F.data.startswith('app_left_'))
async def paginate_left(call: CallbackQuery, state: FSMContext):
    page = int(call.data.split('_')[2])
    data = await state.get_data()
    delegates = data.get('delegates')
    await state.update_data(current_page=page)

    if page == 1:
        await call.message.edit_reply_markup(reply_markup=applications_kb(page, delegates, "check_application"))
    else:
        await call.message.edit_reply_markup(reply_markup=applications_kb(page, delegates))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤–ø—Ä–∞–≤–æ
@router.callback_query(F.data.startswith('app_right_'))
async def paginate_right(call: CallbackQuery, state: FSMContext):
    page = int(call.data.split('_')[2])
    data = await state.get_data()
    delegates = data.get('delegates')
    await state.update_data(current_page=page)

    await call.message.edit_reply_markup(reply_markup=applications_kb(page, delegates))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–ª–µ–≥–∞—Ç–∞
@router.callback_query(F.data.startswith('application_'))
async def check_delegate(call: CallbackQuery, state: FSMContext):
    _, profile_id, current_page = call.data.split("_")
    profile = await get_user(profile_id)

    user_app = await get_user_application(profile_id)
    event_id = user_app[-1]
    event = await get_event(event_id)
    event_name = event[1]

    initials = profile[0]
    username = profile[2]
    level = profile[4]
    rating = profile[5]
    coin = profile[6]

    goals_text = ""
    goals = await get_goals(profile_id)
    if goals:
        for goal_ in goals:
            goals_text += f"üî∏<b> {goal_[0]}\n</b>"
    else:
        goals_text += "üî∏ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ü–µ–ª–µ–π\n"

    profile_info = f"""
üìù <b>–ü—Ä–æ—Ñ–∏–ª—å –¥–µ–ª–µ–≥–∞—Ç–∞</b>:

üéü <b>–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ</b>: {event_name}

üîπ {initials}
üîπ {username}

üéØ –¶–µ–ª–∏:
{goals_text}
üí∞ <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å—á–µ—Ç–∞ (–ú–æ–Ω–µ—Ç):</b> {coin}

üìä <b>–£—Ä–æ–≤–µ–Ω—å</b>: {level}

‚≠êÔ∏è <b>–†–µ–π—Ç–∏–Ω–≥</b>: {rating}
"""
    await state.update_data(profile_id=profile_id, current_page=current_page)
    await call.message.edit_text(profile_info, reply_markup=application_delegate_kb())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–µ–ª–µ–≥–∞—Ç–∞ –∏–∑ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@router.callback_query(F.data == 'delete_from_events')
async def delete_from_events(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    profile_id = data.get('profile_id')
    await remove_user_application(profile_id)
    await call.message.edit_text("–î–µ–ª–µ–≥–∞—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.", reply_markup=applications_back())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏
@router.callback_query(F.data.startswith('change_status_'))
async def status_change(call: CallbackQuery, state: FSMContext):
    status = call.data.split("_")[-1]
    data = await state.get_data()
    profile_id = data.get('profile_id')
    await set_application_status(profile_id, status)
    await call.message.edit_text("–°—Ç–∞—Ç—É—Å –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω.", reply_markup=applications_back())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
@router.callback_query(F.data.startswith('added_applications'))
async def check_added_application(call: CallbackQuery, state: FSMContext):
    page = call.data.split("/")[-1]
    try:
        page = int(page)
    except ValueError:
        page = 1

    delegates = await get_users_application('–î–æ–±–∞–≤–ª–µ–Ω')
    await state.update_data(delegates=delegates, current_page=page)

    if delegates:
        text = "–í—ã–±–µ—Ä–∏ –¥–µ–ª–µ–≥–∞—Ç–∞."
        await call.message.edit_text(text, reply_markup=applications_kb(page, delegates))
    else:
        text = "–ù–æ–≤—ã—Ö –ø—Ä–∏–Ω—è—Ç—ã—Ö –∑–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç."
        await call.message.edit_text(text, reply_markup=applications_back())
