from aiogram import F, Router  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏ –∏–∑ aiogram
from aiogram.fsm.context import FSMContext  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º FSMContext –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
from aiogram.types import CallbackQuery, Message  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∏–ø—ã

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
from database.rating import add_stars, get_user_stars
from database.users import (
    get_user, get_rating, get_goals, set_user_rating, set_user_level,
    set_user_coins, get_user_coins, delete_delegate
)
from keyboards.interaction_kb import (
    delegate_interaction_kb, interactive_kb, add_rating_kb, main_profile_back,
    set_level_kb, add_coins_kb, choose_coin_kb, delete_delegate_kb
)
from keyboards.profile_kb import main_back
from states.coins import CoinsStates

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ä–æ—É—Ç–µ—Ä–∞
router = Router()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –¥–µ–ª–µ–≥–∞—Ç–∞–º–∏
@router.callback_query(F.data.startswith('delegate_interaction'))
async def interaction_menu(call: CallbackQuery):
    page = call.data.split("/")[-1]
    try:
        page = int(page)
    except ValueError:
        page = 1
    delegates = await get_rating()
    interaction_text = "–í—ã–±–µ—Ä–∏ –¥–µ–ª–µ–≥–∞—Ç–∞."
    await call.message.edit_text(interaction_text, reply_markup=interactive_kb(page, delegates))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –¥–µ–ª–µ–≥–∞—Ç–∞
@router.callback_query(F.data.startswith("getdelegate_"))
async def interaction_menu(call: CallbackQuery):
    _, profile_id, current_page = call.data.split("_")
    profile = await get_user(profile_id)

    initials = profile[0]
    username = profile[2]
    level = profile[4]
    rating = profile[5]
    coin = profile[6]

    goals_text = ""
    goals = await get_goals(profile_id)
    if goals:
        for goal_ in goals:
            goals_text += f"üî∏<b> {goal_[0]}\n</b>"
    else:
        goals_text += "üî∏ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ü–µ–ª–µ–π\n"

    profile_info = f"""
üìù <b>–ü—Ä–æ—Ñ–∏–ª—å –¥–µ–ª–µ–≥–∞—Ç–∞</b>:

üîπ {initials}
üîπ {username}

üéØ –¶–µ–ª–∏:
{goals_text}
üí∞ <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å—á–µ—Ç–∞ (–ú–æ–Ω–µ—Ç):</b> {coin}

üìä <b>–£—Ä–æ–≤–µ–Ω—å</b>: {level}

‚≠êÔ∏è <b>–†–µ–π—Ç–∏–Ω–≥</b>: {rating}
        """

    await call.message.edit_text(profile_info, reply_markup=delegate_interaction_kb(profile_id, current_page))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤–ª–µ–≤–æ –∏ –≤–ø—Ä–∞–≤–æ
@router.callback_query(F.data.startswith('left_'))
async def paginate_left(call: CallbackQuery):
    current_page = int(call.data.split('_')[1])
    delegates = await get_rating()
    await call.message.edit_reply_markup(reply_markup=interactive_kb(current_page, delegates))


@router.callback_query(F.data.startswith('right_'))
async def paginate_right(call: CallbackQuery):
    current_page = int(call.data.split('_')[1])
    delegates = await get_rating()
    await call.message.edit_reply_markup(reply_markup=interactive_kb(current_page, delegates))


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –º–æ–Ω–µ—Ç
def update_coin_balance(current_coins: int, operation: str, amount: int):
    if operation == "+":
        current_coins += amount
    elif operation == "-":
        current_coins -= amount
        if current_coins < 0:
            current_coins = 0
    else:
        raise ValueError("–û–ø–µ—Ä–∞—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ + –∏–ª–∏ -")
    return current_coins


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞
@router.callback_query(F.data.startswith("add_rating_"))
async def add_rating(call: CallbackQuery):
    profile_id, current_page = call.data.split("_")[2], call.data.split("_")[3]
    text = "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ–º—É —Ä–µ–π—Ç–∏–Ω–≥:\n–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥?\n–û–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç —Å—É–º–º—ã –µ–≥–æ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –∑–≤–µ–∑–¥."
    await call.message.edit_text(text, reply_markup=add_rating_kb(profile_id, current_page))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–≤–µ–∑–¥
@router.callback_query(F.data.startswith("+rating_"))
async def set_stars(call: CallbackQuery):
    _, star, profile_id, current_page = call.data.split("_")
    star = int(star)
    text = f"–£—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –µ–º—É {star}‚≠êÔ∏è"
    await add_stars(star, int(profile_id))

    stars = await get_user_stars(int(profile_id))
    await set_user_rating(profile_id, sum(star[0] for star in stars))

    await call.message.edit_text(text, reply_markup=main_profile_back(profile_id, current_page))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –¥–µ–ª–µ–≥–∞—Ç–∞
@router.callback_query(F.data.startswith("set_level_"))
async def level_menu(call: CallbackQuery):
    profile_id, current_page = call.data.split("_")[2], call.data.split("_")[3]
    text = "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –¥–µ–ª–µ–≥–∞—Ç–∞."
    await call.message.edit_text(text, reply_markup=set_level_kb(profile_id, current_page))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —É—Ä–æ–≤–Ω—è
@router.callback_query(F.data.startswith("+level_"))
async def set_level(call: CallbackQuery):
    _, level, profile_id, current_page = call.data.split("_")
    level = int(level)
    text = f"–£—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –µ–º—É {level} —É—Ä–æ–≤–µ–Ω—å"

    await set_user_level(profile_id, level)

    await call.message.edit_text(text, reply_markup=main_profile_back(profile_id, current_page))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–æ–Ω–µ—Ç
@router.callback_query(F.data.startswith("add_coin_"))
async def add_coin_menu(call: CallbackQuery):
    profile_id, current_page = call.data.split("_")[2], call.data.split("_")[3]
    text = "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –æ—Ç–Ω—è—Ç—å –º–æ–Ω–µ—Ç—ã."
    await call.message.edit_text(text, reply_markup=add_coins_kb(profile_id, current_page))


@router.callback_query(F.data.startswith('coin_custom_'))
async def set_custom_coin(call: CallbackQuery, state: FSMContext):
    _, profile_id, current_page = call.data.split('_')[-3:]
    await call.message.edit_text("–ù–∞–ø–∏—à–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å (–¢–æ–ª—å–∫–æ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞):")
    await state.update_data(profile_id=profile_id, current_page=current_page)
    await state.set_state(CoinsStates.waiting_for_message)


@router.message(CoinsStates.waiting_for_message)
async def choose_coin(message: Message, state: FSMContext):
    coins = int(message.text)
    data = await state.get_data()
    profile_id = data.get('profile_id')
    current_page = data.get('current_page')
    await state.clear()
    text = f"–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é, —á—Ç–æ –¥–µ–ª–∞—Ç—å —Å {coins} ü™ô"
    await message.answer(text, reply_markup=choose_coin_kb(coins, profile_id, current_page))


@router.callback_query(F.data.startswith("+coin_"))
async def add_coin(call: CallbackQuery):
    profile_id, coin, current_page = call.data.split("_")[2], call.data.split("_")[1], call.data.split("_")[-1]
    coin = int(coin)
    if coin == 1:
        text = f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ {coin} –º–æ–Ω–µ—Ç—É"
    else:
        text = f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ {coin} –º–æ–Ω–µ—Ç"

    current_coins = await get_user_coins(profile_id)
    await set_user_coins(profile_id, update_coin_balance(current_coins, call.data[0], coin))

    await call.message.edit_text(text, reply_markup=main_profile_back(profile_id, current_page))


@router.callback_query(F.data.startswith("-coin_"))
async def remove_coin(call: CallbackQuery):
    profile_id, coin, current_page = call.data.split("_")[2], call.data.split("_")[1], call.data.split("_")[-1]
    coin = int(coin)
    if coin == 1:
        text = f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–æ–±—Ä–∞–ª–∏ {coin} –º–æ–Ω–µ—Ç—É"
    else:
        text = f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–æ–±—Ä–∞–ª–∏ {coin} –º–æ–Ω–µ—Ç"

    current_coins = await get_user_coins(profile_id)
    await set_user_coins(profile_id, update_coin_balance(current_coins, call.data[0], coin))

    await call.message.edit_text(text, reply_markup=main_profile_back(profile_id, current_page))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–µ–ª–µ–≥–∞—Ç–∞
@router.callback_query(F.data.startswith("remove_delegate_"))
async def remove_delegate(call: CallbackQuery):
    profile_id, current_page = call.data.split("_")[2], call.data.split("_")[3]
    text = "–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –¥–µ–ª–µ–≥–∞—Ç–∞?"
    await call.message.edit_text(text, reply_markup=delete_delegate_kb(profile_id, current_page))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –¥–µ–ª–µ–≥–∞—Ç–∞
@router.callback_query(F.data.startswith("deleted_delegate_"))
async def deleted_delegate(call: CallbackQuery):
    profile_id = call.data.split("_")[2]
    text = "–î–µ–ª–µ–≥–∞—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω."
    await delete_delegate(profile_id)
    await call.message.edit_text(text, reply_markup=main_back())
